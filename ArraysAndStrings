// 1.1: Implement an algorithm to determine if a string has all unique characters. What if you can not use additional data structures?
func isUnique(str: String) -> Bool {
    for index in 0..<str.characters.count {
        let letter = str[str.index(str.startIndex, offsetBy: index)]
        for index2 in index+1..<str.characters.count {
            if letter == str[str.index(str.startIndex, offsetBy: index2)] {
                return false
            }
        }
    }
    
    return true
}

// 1.2: Write code to reverse a C-Style String. (C-String means that “abcd” is represented as  ve characters, including the null character.)
func reverseString(str: String) -> String {
    var result = ""
    
    for index in 0..<str.characters.count {
        result.append(str[str.index(str.endIndex, offsetBy: -index-1)])
    }
    
    return result
}

// 1.3: Design an algorithm and write code to remove the duplicate characters in a string without using any additional buffer
func removeDuplicate(str: String) -> String {
    var result = str
    
    for index in 0..<str.characters.count {
        let letter = str[str.index(str.startIndex, offsetBy: index)]
        for index2 in index..<result.characters.count {
            if letter != result[result.index(result.startIndex, offsetBy: index2)] {
                result.remove(at: result.index(result.startIndex, offsetBy: index2))
            }
        }
    }
    
    return result
}

// 1.4: Write a method to decide if two strings are anagrams or not.
func isAnagram(strA: String, strB: String) -> Bool {
    
    if strA.characters.count != strB.characters.count {
        return false
    }
    
    let charA = strA.characters.map { String($0) }
    let charB = strB.characters.map { String($0) }
    
    let charASorted = charA.sorted()
    let charBSorted = charB.sorted()
    
    if charASorted == charBSorted {
        return true
    }
    
    return false
}
